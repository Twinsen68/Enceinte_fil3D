esphome:
  name: enceinte_fil3d
  friendly_name: "Enceinte filament 3D contrôlée"
  on_boot:
    priority: 600
    then:
      - logger.log: "Démarrage de l'enceinte à filament..."

esp32:
  board: esp32dev

wifi:
  ssid: "Ton_SSID"
  password: "Ton_MotDePasse"

  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0

ota:
  platform: esphome

api:
logger:

# Définition du bus I2C (utilisé pour OLED)
i2c:
  sda: 21
  scl: 22
  frequency: 100000 Hz
  scan: true

sensor:
  - platform: dht
    pin: 4
    model: DHT22
    temperature:
      name: "Température"
      id: temperature
    humidity:
      name: "Humidité"
      id: humidity
    update_interval: 10s

output:
  - platform: ledc
    pin: 14  # Contrôle du MOSFET en PWM
    frequency: 1000 Hz
    id: chauffage_pwm

light:
  - platform: monochromatic
    output: chauffage_pwm
    name: "Chauffage Progressif"
    id: chauffage_dimmable

number:
  - platform: template
    name: "Humidité cible"
    id: humidite_cible
    optimistic: true
    min_value: 10
    max_value: 50
    step: 1
    initial_value: 30

  - platform: template
    name: "Durée du séchage"
    id: duree_sechage
    optimistic: true
    min_value: 1
    max_value: 8
    step: 1
    unit_of_measurement: "h"
    initial_value: 4

select:
  - platform: template
    name: "Mode de fonctionnement"
    id: mode_fonctionnement
    optimistic: true
    options: ["Maintien", "Séchage approfondi"]
    initial_option: "Maintien"
    on_value:
      then:
        - logger.log: "Mode de fonctionnement changé à: ${id(mode_fonctionnement).state}"
        - script.execute: gestion_chauffage

script:
  - id: gestion_chauffage
    mode: queued
    then:
      - lambda: |-
          float humidite_actuelle = id(humidity).state;
          float seuil_humidite = id(humidite_cible).state;
          float puissance = 0;
          if (id(mode_fonctionnement).state == "Maintien") {
            if (humidite_actuelle > seuil_humidite + 10) {
              puissance = 1.0;
            } else if (humidite_actuelle > seuil_humidite + 5) {
              puissance = 0.5;
            } else if (humidite_actuelle > seuil_humidite) {
              puissance = 0.3;
            } else {
              puissance = 0.0;
            }
            id(chauffage_dimmable).make_call().set_brightness(puissance).perform();
          } else if (id(mode_fonctionnement).state == "Séchage approfondi") {
            id(chauffage_dimmable).make_call().set_brightness(1.0).perform();
          }
      - delay: !lambda |-
          if (id(mode_fonctionnement).state == "Séchage approfondi") {
            int delay_time = (int)(id(duree_sechage).state * 3600000);
            id(mode_fonctionnement).publish_state("Maintien");
            return delay_time;
          }
          return 0;
      - lambda: |-
          if (id(mode_fonctionnement).state == "Maintien") {
            // Re-execute script to adjust heating after delay
            id(gestion_chauffage).execute();
          }

font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 12

display:
  - platform: ssd1306_i2c
    model: "SSD1306_128x64"
    address: 0x3C
    id: ecran_oled
    lambda: |-
      char buffer[32];
      snprintf(buffer, sizeof(buffer), "Mode: %s", id(mode_fonctionnement).state.c_str());
      it.print(0, 0, id(my_font), buffer);
      snprintf(buffer, sizeof(buffer), "Temp: %.1f C", id(temperature).state);
      it.print(0, 15, id(my_font), buffer);
      snprintf(buffer, sizeof(buffer), "Hum: %.1f %%", id(humidity).state);
      it.print(0, 30, id(my_font), buffer);
      snprintf(buffer, sizeof(buffer), "Cible: %.0f %%", id(humidite_cible).state);
      it.print(0, 45, id(my_font), buffer);
      float brightness = id(chauffage_dimmable).current_values.get_brightness();
      snprintf(buffer, sizeof(buffer), "Chauffage: %.0f %%", brightness * 100.0);
      it.print(0, 60, id(my_font), buffer);
    update_interval: 2s

binary_sensor:
  - platform: gpio
    pin:
      number: 26
      mode: INPUT_PULLUP
    name: "Bouton +"
    on_press:
      then:
        - number.increment: humidite_cible
        - script.execute: gestion_chauffage
        - lambda: |-
            id(ecran_oled).update();
        - logger.log: "Humidité cible incrémentée."

  - platform: gpio
    pin:
      number: 13
      mode: INPUT_PULLUP
    name: "Bouton -"
    on_press:
      then:
        - number.decrement: humidite_cible
        - script.execute: gestion_chauffage
        - lambda: |-
            id(ecran_oled).update();
        - logger.log: "Humidité cible décrémentée."

  - platform: gpio
    pin:
      number: 27
      mode: INPUT_PULLUP
    name: "Bouton Mode"
    on_press:
      then:
        - lambda: |-
            if (id(mode_fonctionnement).state == "Maintien") {
              id(mode_fonctionnement).publish_state("Séchage approfondi");
            } else {
              id(mode_fonctionnement).publish_state("Maintien");
            }
        - script.execute: gestion_chauffage
        - lambda: |-
            id(ecran_oled).update();
        - logger.log: "Mode de fonctionnement changé via bouton."