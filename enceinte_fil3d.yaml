esphome:
  name: enceinte_fil3d
  friendly_name: "Enceinte filament 3D contrôlée"
  on_boot:
    priority: 600
    then:
      - logger.log: "Démarrage de l'enceinte à filament..."
      - delay: 2s
      - lambda: |-
          if (id(ecran_oled) != nullptr) {
            id(ecran_oled).update();
          } else {
            ESP_LOGW("boot", "OLED non initialisé lors du boot, update ignoré");
          }

esp32:
  board: esp32dev

wifi:
  ssid: "Ton_SSID"
  password: "Ton_MotDePasse"

  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0

ota:
  platform: esphome

api:
logger:
  level: INFO

# Définition du bus I2C (utilisé pour OLED)
i2c:
  sda: 21
  scl: 22
  frequency: 100000 Hz
  scan: true

sensor:
  - platform: dht
    pin: 4
    model: DHT22
    temperature:
      name: "Température"
      id: temperature
      on_value:
        then:
          - script.execute: gestion_chauffage
          - lambda: |-
              if (id(ecran_oled) != nullptr) {
                id(ecran_oled).update();
              }
          - logger.log: "Mise à jour forcée après lecture température DHT."
    humidity:
      name: "Humidité"
      id: humidity
      on_value:
        then:
          - script.execute: gestion_chauffage
          - lambda: |-
              if (id(ecran_oled) != nullptr) {
                id(ecran_oled).update();
              }
          - logger.log: "Mise à jour forcée après lecture humidité DHT."
    update_interval: 10s

output:
  - platform: ledc
    pin: 14  # Contrôle du MOSFET en PWM
    frequency: 1000 Hz
    id: chauffage_pwm

light:
  - platform: monochromatic
    output: chauffage_pwm
    name: "Chauffage Progressif"
    id: chauffage_dimmable

number:
  - platform: template
    name: "Humidité cible Maintien"
    id: humidite_cible_maintien
    optimistic: true
    min_value: 10
    max_value: 50
    step: 1
    initial_value: 30

  - platform: template
    name: "Humidité cible Séchage"
    id: humidite_cible_sechage
    optimistic: true
    min_value: 10
    max_value: 50
    step: 1
    initial_value: 20

  - platform: template
    name: "Durée du séchage"
    id: duree_sechage
    optimistic: true
    min_value: 1
    max_value: 8
    step: 1
    unit_of_measurement: "h"
    initial_value: 4

  - platform: template
    name: "Puissance Test"
    id: puissance_test
    optimistic: true
    min_value: 0
    max_value: 100
    step: 10
    unit_of_measurement: "%"
    initial_value: 0

  - platform: template
    name: "Température cible"
    id: temperature_cible
    optimistic: true
    min_value: 20
    max_value: 80
    step: 1
    unit_of_measurement: "°C"
    initial_value: 40

select:
  - platform: template
    name: "Mode de fonctionnement"
    id: mode_fonctionnement
    optimistic: true
    options: ["Off", "Maintien", "Séchage approfondi", "Test"]
    initial_option: "Off"
    on_value:
      then:
        - logger.log: "Mode de fonctionnement changé à: ${id(mode_fonctionnement).state}"
        - script.execute: gestion_chauffage

  - platform: template
    name: "Filament"
    id: filament
    optimistic: true
    options: ["PLA", "PETG", "ABS", "Nylon"]
    initial_option: "PLA"
    on_value:
      then:
        - delay: 500ms
        - lambda: |-
            float temp_cible_filament = 40.0f;
            if (id(filament).state == "PLA") {
              temp_cible_filament = 40.0f;
            } else if (id(filament).state == "PETG") {
              temp_cible_filament = 60.0f;
            } else if (id(filament).state == "ABS") {
              temp_cible_filament = 75.0f;
            } else if (id(filament).state == "Nylon") {
              temp_cible_filament = 75.0f;
            }
            id(temperature_cible).publish_state(temp_cible_filament);
            ESP_LOGI("filament", "Filament sélectionné: %s, Température cible ajustée à %.1f°C.", id(filament).state.c_str(), temp_cible_filament);
            // Forcer mise à jour chauffage après changement filament
            id(gestion_chauffage).execute();
            if (id(ecran_oled) != nullptr) {
              id(ecran_oled).update();
            }

script:
  - id: gestion_chauffage
    mode: queued
    then:
      - lambda: |-
          static float integral = 0.0f;
          const float Kp = 1.5f;  // Ajuster selon besoin
          const float Ki = 0.05f; // Ajuster selon besoin
          const float integral_max = 10.0f;
          float humidite_actuelle = id(humidity).state;
          float temperature_actuelle = id(temperature).state;
          float temp_cible = id(temperature_cible).state;
          float seuil_humidite = 0.0f;
          static std::string current_filament = id(filament).state;
          // Mettre à jour le filament courant si en mode Test
          if (id(mode_fonctionnement).state == "Test") {
            current_filament = id(filament).state;
          } else if (id(mode_fonctionnement).state != "Off") {
            // Appliquer la température cible selon filament courant uniquement si non Off
            if (current_filament == "PLA") {
              temp_cible = 40.0f;
            } else if (current_filament == "PETG") {
              temp_cible = 60.0f;
            } else if (current_filament == "ABS") {
              temp_cible = 75.0f;
            } else if (current_filament == "Nylon") {
              temp_cible = 75.0f;
            }
            id(temperature_cible).publish_state(temp_cible);
          }
          if (isnan(humidite_actuelle) || isnan(temperature_actuelle)) {
            ESP_LOGW("gestion_chauffage", "Lecture DHT échouée, désactivation du chauffage par sécurité.");
            integral = 0.0f;
            id(chauffage_dimmable).make_call().set_brightness(0.0).perform();
            return;
          }
          if (id(mode_fonctionnement).state == "Test") {
            integral = 0.0f;
            float puissance_test_value = id(puissance_test).state / 100.0f;
            id(chauffage_dimmable).make_call().set_brightness(puissance_test_value).perform();
            return;
          }
          if (id(mode_fonctionnement).state == "Maintien") {
            seuil_humidite = id(humidite_cible_maintien).state;
          } else if (id(mode_fonctionnement).state == "Séchage approfondi") {
            seuil_humidite = id(humidite_cible_sechage).state;
          }
          float puissance = 0.0f;
          if (id(mode_fonctionnement).state == "Off") {
            puissance = 0.0f;
            integral = 0.0f;
          } else if ((id(mode_fonctionnement).state == "Maintien" && humidite_actuelle >= seuil_humidite) ||
                     id(mode_fonctionnement).state == "Séchage approfondi") {
            float erreur = temp_cible - temperature_actuelle;
            float erreur_norm = erreur / 20.0f;
            if (erreur_norm > 1.0f) erreur_norm = 1.0f;
            if (erreur_norm < -1.0f) erreur_norm = -1.0f;
            integral += erreur_norm;
            if (integral > integral_max) integral = integral_max;
            if (integral < 0.0f) integral = 0.0f;
            puissance = Kp * erreur_norm + Ki * integral;
            if (puissance > 1.0f) puissance = 1.0f;
            if (puissance < 0.0f) puissance = 0.0f;
          } else {
            puissance = 0.0f;
            integral = 0.0f;
          }
          ESP_LOGI("gestion_chauffage", "Mode: %s | Temp: %.1f/%.1f | PWM: %.0f%%",
                   id(mode_fonctionnement).state.c_str(), temperature_actuelle, temp_cible, puissance * 100.0f);
          id(chauffage_dimmable).make_call().set_brightness(puissance).perform();

font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 12
    glyphs: " !\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzéèàçùÉÈÀÇÙ"

display:
  - platform: ssd1306_i2c
    model: "SSD1306_128x64"
    address: 0x3C
    id: ecran_oled
    lambda: |-
      char buffer[32];
      snprintf(buffer, sizeof(buffer), "Mode: %s", id(mode_fonctionnement).state.c_str());
      it.print(0, 0, id(my_font), buffer);
      if (!isnan(id(temperature).state)) {
        snprintf(buffer, sizeof(buffer), "Temp: %.1f C", id(temperature).state);
      } else {
        snprintf(buffer, sizeof(buffer), "Temp: Err");
      }
      it.print(0, 13, id(my_font), buffer);
      if (!isnan(id(humidity).state)) {
        snprintf(buffer, sizeof(buffer), "Hum: %.1f %%", id(humidity).state);
      } else {
        snprintf(buffer, sizeof(buffer), "Hum: Err");
      }
      it.print(0, 26, id(my_font), buffer);

      // Ligne 4 selon mode
      if (id(mode_fonctionnement).state == "Test") {
        snprintf(buffer, sizeof(buffer), "Puissance: %.0f%%", id(puissance_test).state);
        it.print(0, 39, id(my_font), buffer);
      } else if (id(mode_fonctionnement).state == "Maintien" || id(mode_fonctionnement).state == "Séchage approfondi") {
        float pwm_pct = id(chauffage_dimmable).current_values.get_brightness() * 100.0f;
        bool chauffe_on = (pwm_pct > 0.0f);
        snprintf(buffer, sizeof(buffer), "Chauffage: %s %.0f%%", chauffe_on ? "ON" : "OFF", chauffe_on ? pwm_pct : 0.0f);
        it.print(0, 39, id(my_font), buffer);
      } else {
        snprintf(buffer, sizeof(buffer), "Filament: %s", id(filament).state.c_str());
        it.print(0, 39, id(my_font), buffer);
      }

      if (id(mode_fonctionnement).state == "Maintien") {
        snprintf(buffer, sizeof(buffer), "T Cible: %.0fC H Cible: %.0f%%", id(temperature_cible).state, id(humidite_cible_maintien).state);
      } else if (id(mode_fonctionnement).state == "Séchage approfondi") {
        snprintf(buffer, sizeof(buffer), "T Cible: %.0fC H Cible: %.0f%%", id(temperature_cible).state, id(humidite_cible_sechage).state);
      } else {
        snprintf(buffer, sizeof(buffer), "T Cible: %.0f C", id(temperature_cible).state);
      }
      it.print(0, 52, id(my_font), buffer);

      float pwm_pct = 0.0f;
      bool chauffe_on = false;
      if (id(mode_fonctionnement).state == "Test") {
        pwm_pct = id(puissance_test).state;
        chauffe_on = (pwm_pct > 0.0f);
      } else {
        pwm_pct = id(chauffage_dimmable).current_values.get_brightness() * 100.0f;
        chauffe_on = (pwm_pct > 0.0f);
      }
      if (id(mode_fonctionnement).state == "Off") {
        snprintf(buffer, sizeof(buffer), "Matériel: %s", id(filament).state.c_str());
        it.print(0, 64, id(my_font), buffer);
      } else if (id(mode_fonctionnement).state == "Maintien" || id(mode_fonctionnement).state == "Séchage approfondi") {
        snprintf(buffer, sizeof(buffer), "Chauffage %s: %s %.0f%%", id(filament).state.c_str(), chauffe_on ? "ON" : "OFF", pwm_pct);
        it.print(0, 64, id(my_font), buffer);
      } else if (id(mode_fonctionnement).state == "Test") {
        snprintf(buffer, sizeof(buffer), "Chauffage %s: %s %.0f%%", id(filament).state.c_str(), chauffe_on ? "ON" : "OFF", pwm_pct);
        it.print(0, 64, id(my_font), buffer);
      }
    update_interval: 2s

binary_sensor:
  - platform: gpio
    pin:
      number: 26
      mode: INPUT_PULLUP
    name: "Bouton +"
    on_press:
      then:
        - lambda: |-
            const std::vector<std::string> filaments = {"PLA", "PETG", "ABS", "Nylon"};
            if (id(mode_fonctionnement).state == "Test") {
              // En mode Test, bouton + incrémente puissance_test de 10% max 100%
              float current = id(puissance_test).state;
              current += 10;
              if (current > 100) current = 100;
              id(puissance_test).publish_state(current);
              ESP_LOGD("bouton_plus", "Puissance Test incrémentée à %.0f%%", current);
            } else if (id(mode_fonctionnement).state == "Off") {
              // En mode Off, changer le filament cycliquement +
              std::string current_filament = id(filament).state;
              auto it = std::find(filaments.begin(), filaments.end(), current_filament);
              if (it != filaments.end()) {
                ++it;
                if (it == filaments.end()) {
                  it = filaments.begin();
                }
                id(filament).publish_state(*it);
                float temp_cible_filament = 40.0f;
                if (*it == "PLA") {
                  temp_cible_filament = 40.0f;
                } else if (*it == "PETG") {
                  temp_cible_filament = 60.0f;
                } else if (*it == "ABS") {
                  temp_cible_filament = 75.0f;
                } else if (*it == "Nylon") {
                  temp_cible_filament = 75.0f;
                }
                id(temperature_cible).publish_state(temp_cible_filament);
                if (id(ecran_oled) != nullptr) {
                  id(ecran_oled).update();
                }
                ESP_LOGI("bouton_plus", "Filament changé: %s, Température cible: %.1f°C", it->c_str(), temp_cible_filament);
              }
            } else {
              // En mode Maintien ou Séchage, bouton + incrémente l'humidité cible correspondante (max 50%)
              if (id(mode_fonctionnement).state == "Maintien") {
                id(humidite_cible_maintien).publish_state(std::min(id(humidite_cible_maintien).state + 1, 50.0f));
              } else {
                id(humidite_cible_sechage).publish_state(std::min(id(humidite_cible_sechage).state + 1, 50.0f));
              }
            }
        - script.execute: gestion_chauffage
        - lambda: |-
            if (id(ecran_oled) != nullptr) {
              id(ecran_oled).update();
            }
        - logger.log: "Humidité cible incrémentée, puissance test modifiée ou filament cyclé."

  - platform: gpio
    pin:
      number: 13
      mode: INPUT_PULLUP
    name: "Bouton -"
    on_press:
      then:
        - lambda: |-
            const std::vector<std::string> filaments = {"PLA", "PETG", "ABS", "Nylon"};
            if (id(mode_fonctionnement).state == "Test") {
              // En mode Test, bouton - décrémente puissance_test de 10% min 0%
              float current = id(puissance_test).state;
              current -= 10;
              if (current < 0) current = 0;
              id(puissance_test).publish_state(current);
              ESP_LOGD("bouton_moins", "Puissance Test décrémentée à %.0f%%", current);
            } else if (id(mode_fonctionnement).state == "Off") {
              // En mode Off, changer le filament cycliquement -
              std::string current_filament = id(filament).state;
              auto it = std::find(filaments.begin(), filaments.end(), current_filament);
              if (it != filaments.end()) {
                if (it == filaments.begin()) {
                  it = filaments.end();
                }
                --it;
                id(filament).publish_state(*it);
                float temp_cible_filament = 40.0f;
                if (*it == "PLA") {
                  temp_cible_filament = 40.0f;
                } else if (*it == "PETG") {
                  temp_cible_filament = 60.0f;
                } else if (*it == "ABS") {
                  temp_cible_filament = 75.0f;
                } else if (*it == "Nylon") {
                  temp_cible_filament = 75.0f;
                }
                id(temperature_cible).publish_state(temp_cible_filament);
                if (id(ecran_oled) != nullptr) {
                  id(ecran_oled).update();
                }
                ESP_LOGI("bouton_moins", "Filament changé: %s, Température cible: %.1f°C", it->c_str(), temp_cible_filament);
              }
            } else {
              // En mode Maintien ou Séchage, bouton - décrémente l'humidité cible correspondante (min 10%)
              if (id(mode_fonctionnement).state == "Maintien") {
                id(humidite_cible_maintien).publish_state(std::max(id(humidite_cible_maintien).state - 1, 10.0f));
              } else {
                id(humidite_cible_sechage).publish_state(std::max(id(humidite_cible_sechage).state - 1, 10.0f));
              }
            }
        - script.execute: gestion_chauffage
        - lambda: |-
            if (id(ecran_oled) != nullptr) {
              id(ecran_oled).update();
            }
        - logger.log: "Humidité cible décrémentée, puissance test modifiée ou filament cyclé."

  - platform: gpio
    pin:
      number: 27
      mode: INPUT_PULLUP
    name: "Bouton Mode"
    on_press:
      then:
        - lambda: |-
            if (id(mode_fonctionnement).state == "Off") {
              id(mode_fonctionnement).publish_state("Test");
            } else if (id(mode_fonctionnement).state == "Test") {
              id(mode_fonctionnement).publish_state("Maintien");
            } else if (id(mode_fonctionnement).state == "Maintien") {
              id(mode_fonctionnement).publish_state("Séchage approfondi");
            } else {
              id(mode_fonctionnement).publish_state("Off");
            }
        - script.execute: gestion_chauffage
        - lambda: |-
            if (id(ecran_oled) != nullptr) {
              id(ecran_oled).update();
            }
        - logger.log: "Mode de fonctionnement ou filament changé via bouton."

switch:
  - platform: template
    name: "Test PWM MOSFET"
    id: test_pwm_mosfet
    turn_on_action:
      - light.turn_on:
          id: chauffage_dimmable
          brightness: 100%
      - logger.log: "Test PWM MOSFET ON"
    turn_off_action:
      - light.turn_off:
          id: chauffage_dimmable
      - logger.log: "Test PWM MOSFET OFF"