esphome:
  name: enceinte_fil3d
  friendly_name: "Enceinte filament 3D contrôlée"
  on_boot:
    priority: 600
    then:
      - logger.log: "Démarrage de l'enceinte à filament..."

esp32:
  board: esp32dev

wifi:
  ssid: "Ton_SSID"
  password: "Ton_MotDePasse"

  manual_ip:
    static_ip: 192.168.1.100
    gateway: 192.168.1.1
    subnet: 255.255.255.0

ota:
  platform: esphome

api:
logger:
  level: INFO

# Définition du bus I2C (utilisé pour OLED)
i2c:
  sda: 21
  scl: 22
  frequency: 100000 Hz
  scan: true

sensor:
  - platform: dht
    pin: 4
    model: DHT22
    temperature:
      name: "Température"
      id: temperature
      on_value:
        then:
          - script.execute: gestion_chauffage
          - lambda: |-
              id(ecran_oled).update();
          - logger.log: "Mise à jour forcée après lecture température DHT."
    humidity:
      name: "Humidité"
      id: humidity
      on_value:
        then:
          - script.execute: gestion_chauffage
          - lambda: |-
              id(ecran_oled).update();
          - logger.log: "Mise à jour forcée après lecture humidité DHT."
    update_interval: 10s

output:
  - platform: ledc
    pin: 14  # Contrôle du MOSFET en PWM
    frequency: 1000 Hz
    id: chauffage_pwm

light:
  - platform: monochromatic
    output: chauffage_pwm
    name: "Chauffage Progressif"
    id: chauffage_dimmable

number:
  - platform: template
    name: "Humidité cible Maintien"
    id: humidite_cible_maintien
    optimistic: true
    min_value: 10
    max_value: 50
    step: 1
    initial_value: 30

  - platform: template
    name: "Humidité cible Séchage"
    id: humidite_cible_sechage
    optimistic: true
    min_value: 10
    max_value: 50
    step: 1
    initial_value: 20

  - platform: template
    name: "Durée du séchage"
    id: duree_sechage
    optimistic: true
    min_value: 1
    max_value: 8
    step: 1
    unit_of_measurement: "h"
    initial_value: 4

  - platform: template
    name: "Puissance Test"
    id: puissance_test
    optimistic: true
    min_value: 0
    max_value: 100
    step: 10
    unit_of_measurement: "%"
    initial_value: 0

select:
  - platform: template
    name: "Mode de fonctionnement"
    id: mode_fonctionnement
    optimistic: true
    options: ["Off", "Maintien", "Séchage approfondi", "Test"]
    initial_option: "Off"
    on_value:
      then:
        - logger.log: "Mode de fonctionnement changé à: ${id(mode_fonctionnement).state}"
        - script.execute: gestion_chauffage

script:
  - id: gestion_chauffage
    mode: queued
    then:
      - lambda: |-
          float humidite_actuelle = id(humidity).state;
          float seuil_humidite = 0.0;
          if (isnan(humidite_actuelle)) {
            ESP_LOGW("gestion_chauffage", "Lecture DHT échouée, désactivation du chauffage par sécurité.");
            id(chauffage_dimmable).make_call().set_brightness(0.0).perform();
            return;
          }
          if (id(mode_fonctionnement).state == "Test") {
            float puissance_test = id(puissance_test) / 100.0f;
            ESP_LOGD("gestion_chauffage", "Mode Test: Puissance manuelle = %.1f%%", id(puissance_test));
            id(chauffage_dimmable).make_call().set_brightness(puissance_test).perform();
            return;
          }
          if (id(mode_fonctionnement).state == "Maintien") {
            seuil_humidite = id(humidite_cible_maintien).state;
          } else if (id(mode_fonctionnement).state == "Séchage approfondi") {
            seuil_humidite = id(humidite_cible_sechage).state;
          }
          float puissance = 0.0;
          if (id(mode_fonctionnement).state == "Off") {
            puissance = 0.0;  // Chauffage off
          } else if (id(mode_fonctionnement).state == "Maintien") {
            if (humidite_actuelle >= seuil_humidite) {
              puissance = 1.0;
            } else {
              puissance = 0.0;
            }
          } else if (id(mode_fonctionnement).state == "Séchage approfondi") {
            puissance = 1.0;
          }
          ESP_LOGD("gestion_chauffage", "Humidité actuelle: %.1f, Seuil cible: %.1f, Mode: %s, Puissance: %.1f", humidite_actuelle, seuil_humidite, id(mode_fonctionnement).state.c_str(), puissance);
          id(chauffage_dimmable).make_call().set_brightness(puissance).perform();

font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 12
    glyphs: " !\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzéèàçùÉÈÀÇÙ"

display:
  - platform: ssd1306_i2c
    model: "SSD1306_128x64"
    address: 0x3C
    id: ecran_oled
    lambda: |-
      char buffer[32];
      snprintf(buffer, sizeof(buffer), "Mode: %s", id(mode_fonctionnement).state.c_str());
      it.print(0, 0, id(my_font), buffer);
      if (!isnan(id(temperature).state)) {
        snprintf(buffer, sizeof(buffer), "Temp: %.1f C", id(temperature).state);
      } else {
        snprintf(buffer, sizeof(buffer), "Temp: Err");
      }
      it.print(0, 13, id(my_font), buffer);
      if (!isnan(id(humidity).state)) {
        snprintf(buffer, sizeof(buffer), "Hum: %.1f %%", id(humidity).state);
      } else {
        snprintf(buffer, sizeof(buffer), "Hum: Err");
      }
      it.print(0, 26, id(my_font), buffer);
      if (id(mode_fonctionnement).state == "Maintien") {
        snprintf(buffer, sizeof(buffer), "Cible M: %.0f %%", id(humidite_cible_maintien).state);
      } else if (id(mode_fonctionnement).state == "Séchage approfondi") {
        snprintf(buffer, sizeof(buffer), "Cible S: %.0f %%", id(humidite_cible_sechage).state);
      } else if (id(mode_fonctionnement).state == "Test") {
        snprintf(buffer, sizeof(buffer), "Puissance T: %.0f%%", id(puissance_test).state);
      } else {
        snprintf(buffer, sizeof(buffer), "Cible: -- %%");
      }
      it.print(0, 39, id(my_font), buffer);
      float pwm_pct = id(chauffage_dimmable).current_values.get_brightness() * 100.0f;
      bool chauffe_on = false;
      if (id(mode_fonctionnement).state == "Off") {
        chauffe_on = false;
        pwm_pct = 0.0f;
      } else if (id(mode_fonctionnement).state == "Test") {
        pwm_pct = id(puissance_test).state;
        chauffe_on = (pwm_pct > 0.0f);
      } else {
        if (pwm_pct > 0.0f) {
          chauffe_on = true;
        } else {
          chauffe_on = false;
        }
      }
      snprintf(buffer, sizeof(buffer), "Chauffage: %s %.0f%%", chauffe_on ? "ON" : "OFF", pwm_pct);
      it.print(0, 52, id(my_font), buffer);
    update_interval: 2s

binary_sensor:
  - platform: gpio
    pin:
      number: 26
      mode: INPUT_PULLUP
    name: "Bouton +"
    on_press:
      then:
        - lambda: |-
            if (id(mode_fonctionnement).state == "Test") {
              float current = id(puissance_test).state;
              current += 10;
              if (current > 100) current = 100;
              id(puissance_test).publish_state(current);
              ESP_LOGD("bouton_plus", "Puissance Test incrémentée à %.0f%%", current);
            } else {
              id(humidite_cible_maintien).publish_state(std::min(id(humidite_cible_maintien).state + 1, 50.0f));
            }
        - script.execute: gestion_chauffage
        - lambda: |-
            id(ecran_oled).update();
        - logger.log: "Humidité cible incrémentée."

  - platform: gpio
    pin:
      number: 13
      mode: INPUT_PULLUP
    name: "Bouton -"
    on_press:
      then:
        - lambda: |-
            if (id(mode_fonctionnement).state == "Test") {
              float current = id(puissance_test).state;
              current -= 10;
              if (current < 0) current = 0;
              id(puissance_test).publish_state(current);
              ESP_LOGD("bouton_moins", "Puissance Test décrémentée à %.0f%%", current);
            } else {
              id(humidite_cible_maintien).publish_state(std::max(id(humidite_cible_maintien).state - 1, 10.0f));
            }
        - script.execute: gestion_chauffage
        - lambda: |-
            id(ecran_oled).update();
        - logger.log: "Humidité cible décrémentée."

  - platform: gpio
    pin:
      number: 27
      mode: INPUT_PULLUP
    name: "Bouton Mode"
    on_press:
      then:
        - lambda: |-
            if (id(mode_fonctionnement).state == "Maintien") {
              id(mode_fonctionnement).publish_state("Séchage approfondi");
            } else if (id(mode_fonctionnement).state == "Séchage approfondi") {
              id(mode_fonctionnement).publish_state("Off");
            } else if (id(mode_fonctionnement).state == "Off") {
              id(mode_fonctionnement).publish_state("Test");
            } else {
              id(mode_fonctionnement).publish_state("Maintien");
            }
        - script.execute: gestion_chauffage
        - lambda: |-
            id(ecran_oled).update();
        - logger.log: "Mode de fonctionnement changé via bouton."
switch:
  - platform: template
    name: "Test PWM MOSFET"
    id: test_pwm_mosfet
    turn_on_action:
      - light.turn_on:
          id: chauffage_dimmable
          brightness: 100%
      - logger.log: "Test PWM MOSFET ON"
    turn_off_action:
      - light.turn_off:
          id: chauffage_dimmable
      - logger.log: "Test PWM MOSFET OFF"